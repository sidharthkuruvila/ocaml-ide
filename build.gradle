import org.jetbrains.grammarkit.tasks.*

plugins {
    id "org.jetbrains.intellij" version "0.4.21"
    id "org.jetbrains.grammarkit" version "2021.1.3"
    id "org.jetbrains.kotlin.jvm" version '1.5.31'
}

apply plugin: 'org.jetbrains.grammarkit'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'java'
apply plugin: "kotlin"



compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

intellij {
    version ideaVersion
    plugins 'coverage'
    pluginName 'ocaml-idea'
    intellij.updateSinceUntilBuild false
}


group 'kuruvila'
version '0.0.1-SNAPSHOT'

sourceSets {
    main.java.srcDirs += "gen"
}


configurations {
    gen
}


repositories {
    mavenCentral()
}

dependencies {
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.13.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    testCompile 'junit:junit:4.12'
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7"
    gen 'de.jflex:jflex:1.6.0'
    gen files('lib/gk/grammar-kit-patched.jar')
}

task generateOcamlLexer(type: GenerateLexer) {
    source = "parser/OcamlLexer.flex"
    targetDir = "gen/org/ocaml/lang/lexer/"
    targetClass = "_OcamlLexer"
    purgeOldFiles = true
}

task generateSexpLexer(type: GenerateLexer) {
    source = "parser/sexp/SexpLexer.flex"
    targetDir = "gen/org/ocaml/sexp/lexer/"
    targetClass = "_SexpLexer"
    purgeOldFiles = true
}


task generateOcamlPsiAndParser(type: GenerateParser) {
    source = "parser/ocaml.bnf"
    targetRoot = 'gen'
    pathToParser = '/org/ocaml/lang/parser/OcamlParser.java'
    pathToPsiRoot = '/org/ocaml/lang/parser/psi'
    purgeOldFiles = true
}

task generateSexpPsiAndParser(type: GenerateParser) {
    source = "parser/sexp/sexp.bnf"
    targetRoot = 'gen'
    pathToParser = '/org/ocaml/sexp/parser/SexpParser.java'
    pathToPsiRoot = '/org/ocaml/sexp/parser/psi'
    purgeOldFiles = true
}

task generateJbuildPsiAndParser(type: GenerateParser) {
    source = "parser/jbuild/jbuild.bnf"
    targetRoot = 'gen'
    pathToParser = '/org/ocaml/jbuild/parser/SexpParser.java'
    pathToPsiRoot = '/org/ocaml/jbuild/parser/psi'
    purgeOldFiles = true
}

compileKotlin {
    dependsOn generateOcamlLexer
    dependsOn generateOcamlPsiAndParser

    dependsOn generateSexpLexer
    dependsOn generateSexpPsiAndParser

    dependsOn generateJbuildPsiAndParser
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}
